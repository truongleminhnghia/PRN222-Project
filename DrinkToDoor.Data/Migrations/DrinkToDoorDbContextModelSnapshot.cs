// <auto-generated />
using System;
using DrinkToDoor.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrinkToDoor.Data.Migrations
{
    [DbContext(typeof(DrinkToDoorDbContext))]
    partial class DrinkToDoorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("cart_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("cart");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("cart_item_id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IngredientProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_product_id");

                    b.Property<Guid>("KitProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("IngredientProductId");

                    b.HasIndex("KitProductId");

                    b.ToTable("cart_item");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("category_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryType", "Name" }, "IX_Category_Type_Name");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("image_id");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_id");

                    b.Property<Guid?>("KitId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_id");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("KitId");

                    b.ToTable("image");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("varchar(300)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<string>("PackingUnit")
                        .IsRequired()
                        .HasColumnType("JSON")
                        .HasColumnName("packing_unit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int?>("QuantityPerCarton")
                        .HasColumnType("int")
                        .HasColumnName("quantity_per_carton");

                    b.Property<int>("QuantityPerPackingUnit")
                        .HasColumnType("int")
                        .HasColumnName("quantity_per_packing_unit");

                    b.Property<int?>("QuantitySingle")
                        .HasColumnType("int")
                        .HasColumnName("quantity_single");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("WeightPerBag")
                        .IsRequired()
                        .HasColumnType("float")
                        .HasColumnName("weight_per_bag");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ingredient");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.IngredientProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("QuantityPackage")
                        .HasColumnType("int")
                        .HasColumnName("quantity_package");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<string>("UnitPackage")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("unit_package");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("ingredient_product");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Status" }, "IX_Kit_Status");

                    b.ToTable("kit");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.KitIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_ingredient_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_id");

                    b.Property<Guid>("KitId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_id");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("KitId");

                    b.ToTable("kit_ingredient");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.KitProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("KitId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amout");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KitId" }, "IX_KitProduct_KitId");

                    b.ToTable("kit_product");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailShipping")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("email_shipping");

                    b.Property<string>("FullNameShipping")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("full_name_shipping");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<string>("PhoneShipping")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_shipping");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shipping_address");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("order_infor");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("order_detail_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("IngredientProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ingredient_product_id");

                    b.Property<Guid>("KitProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kit_product_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientProductId");

                    b.HasIndex("KitProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "PaymentMethod", "Status" }, "IX_Payment_Method_Status");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("email");

                    b.Property<string>("EnumAccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_status");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Cart", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.CartItem", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.IngredientProduct", "IngredientProduct")
                        .WithMany()
                        .HasForeignKey("IngredientProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.KitProduct", "KitProduct")
                        .WithMany()
                        .HasForeignKey("KitProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("IngredientProduct");

                    b.Navigation("KitProduct");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Image", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("Images")
                        .HasForeignKey("IngredientId");

                    b.HasOne("DrinkToDoor.Data.Entities.Kit", "Kit")
                        .WithMany("Images")
                        .HasForeignKey("KitId");

                    b.Navigation("Ingredient");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Ingredient", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Category", "Category")
                        .WithMany("Ingredients")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.IngredientProduct", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientProducts")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Kit", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Category", "Category")
                        .WithMany("Kits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.KitIngredient", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("KitIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.Kit", "Kit")
                        .WithMany("KitIngredients")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.KitProduct", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Kit", "Kit")
                        .WithMany("KitProducts")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Order", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.IngredientProduct", "IngredientProduct")
                        .WithMany()
                        .HasForeignKey("IngredientProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.KitProduct", "KitProduct")
                        .WithMany()
                        .HasForeignKey("KitProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientProduct");

                    b.Navigation("KitProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Payment", b =>
                {
                    b.HasOne("DrinkToDoor.Data.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinkToDoor.Data.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Category", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Kits");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Ingredient", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("IngredientProducts");

                    b.Navigation("KitIngredients");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Kit", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("KitIngredients");

                    b.Navigation("KitProducts");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DrinkToDoor.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
